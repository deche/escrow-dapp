{"ast":null,"code":"var _jsxFileName = \"/Users/deche/code/chainshot/solidity/escrow/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Escrow from './artifacts/src/contracts/Escrow.sol/Escrow';\nimport { ethers } from 'ethers';\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\nprovider.send(\"eth_requestAccounts\", []);\n\nconst App = () => {\n  _s();\n\n  const [contracts, setContracts] = useState({});\n\n  async function deploy(arbiter, beneficiary, value) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }); //await provider.send(\"eth_requestAccounts\", []);\n\n    const signer = provider.getSigner();\n    console.log(\"Account:\", await signer.getAddress());\n    const factory = new ethers.ContractFactory(Escrow.abi, Escrow.bytecode, signer);\n    return factory.deploy(arbiter, beneficiary, {\n      value\n    });\n  }\n\n  async function newContract() {\n    if (typeof window.ethereum !== 'undefined') {\n      //let arbiter = \"0x7fbA8b9606674E026D1Ae4468AadB9aCEfD41ae2\";\n      let arbiter = \"0xEE344dcB087D1bfEc402B815E7Bb3BB686701500\"; //let beneficiary = \"0x8F6E16d717fb162C20aC6AC994cCbc44E6804EE9\";\n\n      let beneficiary = \"0xbC227F22124b12a5770D81B2a23e65d2c03f7d93\";\n      let value = ethers.BigNumber.from(\"110000000000000000\");\n      const contract = await deploy(arbiter, beneficiary, value);\n      console.log(contract);\n      contract.x_arbiter = arbiter;\n      contract.x_beneficiary = beneficiary; //setContracts(contracts => [...contracts, contract]);\n\n      const newContracts = { ...contracts\n      };\n      newContracts[contract.address] = contract;\n      setContracts(newContracts);\n    } else {\n      console.log('ethereum undefined');\n    }\n  }\n\n  async function approve(contract) {\n    const signer = provider.getSigner();\n    await contract.connect(signer).approve();\n    const newContracts = { ...contracts\n    };\n    delete newContracts[contract.address];\n    setContracts(newContracts);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container create-contract\",\n    children: [\"App 1\", /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"label\",\n          children: \"Arbiter address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"control\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"input\",\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"label\",\n          children: \"Beneficiary address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"control\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"input\",\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newContract,\n        children: \"Set Greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(contracts).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Address: \", contracts[key].address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 46\n        }, this), \"arbiter: \", contracts[key].x_arbiter, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 48\n        }, this), \"beneficiary: \", contracts[key].x_beneficiary, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => approve(contracts[key]),\n          children: \"Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"DaqzI6qAJPO6k5Go1KqEBpqgkV8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/deche/code/chainshot/solidity/escrow/client/src/App.js"],"names":["React","useState","Escrow","ethers","provider","providers","Web3Provider","window","ethereum","send","App","contracts","setContracts","deploy","arbiter","beneficiary","value","accounts","request","method","signer","getSigner","console","log","getAddress","factory","ContractFactory","abi","bytecode","newContract","BigNumber","from","contract","x_arbiter","x_beneficiary","newContracts","address","approve","connect","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Escrow from './artifacts/src/contracts/Escrow.sol/Escrow';\nimport {ethers} from 'ethers';\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\n\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n provider.send(\"eth_requestAccounts\", []);\n\n\n const App = () =>  {\n\n\n  const [contracts, setContracts] = useState({});\n\n  async function deploy(arbiter, beneficiary, value) {\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    //await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    console.log(\"Account:\", await signer.getAddress());\n    const factory = new ethers.ContractFactory(Escrow.abi, Escrow.bytecode, signer);\n    return factory.deploy(arbiter, beneficiary, { value });\n  }\n  \n  async function newContract() {\n    if (typeof window.ethereum !== 'undefined') {\n      //let arbiter = \"0x7fbA8b9606674E026D1Ae4468AadB9aCEfD41ae2\";\n      let arbiter = \"0xEE344dcB087D1bfEc402B815E7Bb3BB686701500\";\n      //let beneficiary = \"0x8F6E16d717fb162C20aC6AC994cCbc44E6804EE9\";\n      let beneficiary = \"0xbC227F22124b12a5770D81B2a23e65d2c03f7d93\";\n      let value = ethers.BigNumber.from(\"110000000000000000\");\n      const contract = await deploy(arbiter, beneficiary, value);\n      console.log(contract);\n      contract.x_arbiter = arbiter;\n      contract.x_beneficiary = beneficiary;\n      //setContracts(contracts => [...contracts, contract]);\n      const newContracts = {...contracts};\n      newContracts[contract.address] = contract;\n      setContracts(newContracts);\n    } else {\n      console.log('ethereum undefined');\n    }\n  \n  }\n\n  async function approve(contract) {\n    const signer = provider.getSigner();\n    await contract.connect(signer).approve();\n    const newContracts = {...contracts};\n    delete newContracts[contract.address];\n    setContracts(newContracts);\n  } \n\n  return (\n    <div className=\"container create-contract\">\n      App 1 \n      <section className=\"section\">\n        <div class=\"field\">\n          <label class=\"label\">Arbiter address</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"text\" />\n          </div>\n        </div>\n        <div class=\"field\">\n          <label class=\"label\">Beneficiary address</label>\n          <div class=\"control\">\n            <input class=\"input\" type=\"text\" />\n          </div>\n        </div>\n\n        <button onClick={newContract}>Set Greeting</button>\n      </section>\n\n      <div>\n        {Object.keys(contracts).map((key) => \n          <div key={key}>\n            Address: {contracts[key].address}<br />\n            arbiter: {contracts[key].x_arbiter}<br />\n            beneficiary: {contracts[key].x_beneficiary}\n\n            <button onClick={() => approve(contracts[key])}>Approve</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}