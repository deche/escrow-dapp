{"ast":null,"code":"var _jsxFileName = \"/Users/deche/code/chainshot/solidity/escrow/src/App.js\";\nimport Escrow from './artifacts/src/contracts/Escrow.sol/Escrow';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\nasync function deploy(arbiter, beneficiary, value) {\n  //await window.ethereum.request({ method: 'eth_requestAccounts' });\n  await provider.send(\"eth_requestAccounts\", []);\n  console.log('hello?');\n  const signer = provider.getSigner();\n  console.log(\"Account:\", await signer.getAddress());\n  const factory = new ethers.ContractFactory(Escrow.abi, Escrow.bytecode, signer);\n  return factory.deploy(arbiter, beneficiary, {\n    value\n  });\n}\n\nasync function newContract() {\n  if (typeof window.ethereum !== 'undefined') {\n    let arbiter = \"0x7fbA8b9606674E026D1Ae4468AadB9aCEfD41ae2\";\n    let beneficiary = \"0x8F6E16d717fb162C20aC6AC994cCbc44E6804EE9\";\n    let value = ethers.BigNumber.from(\"300000000000000000\");\n    const contract = await deploy(arbiter, beneficiary, value);\n    console.log('ga sampe?');\n    console.log(contract);\n  } else {\n    console.log('ethereum undefined');\n  }\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [\"App 1\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newContract,\n      children: \"Set Greeting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/deche/code/chainshot/solidity/escrow/src/App.js"],"names":["Escrow","ethers","provider","providers","Web3Provider","window","ethereum","deploy","arbiter","beneficiary","value","send","console","log","signer","getSigner","getAddress","factory","ContractFactory","abi","bytecode","newContract","BigNumber","from","contract","App"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,6CAAnB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAG,IAAID,MAAM,CAACE,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;;AAEA,eAAeC,MAAf,CAAsBC,OAAtB,EAA+BC,WAA/B,EAA4CC,KAA5C,EAAmD;AACjD;AACA,QAAMR,QAAQ,CAACS,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAMC,MAAM,GAAGZ,QAAQ,CAACa,SAAT,EAAf;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,MAAMC,MAAM,CAACE,UAAP,EAA9B;AACA,QAAMC,OAAO,GAAG,IAAIhB,MAAM,CAACiB,eAAX,CAA2BlB,MAAM,CAACmB,GAAlC,EAAuCnB,MAAM,CAACoB,QAA9C,EAAwDN,MAAxD,CAAhB;AACA,SAAOG,OAAO,CAACV,MAAR,CAAeC,OAAf,EAAwBC,WAAxB,EAAqC;AAAEC,IAAAA;AAAF,GAArC,CAAP;AACD;;AAED,eAAeW,WAAf,GAA6B;AAC3B,MAAI,OAAOhB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,QAAIE,OAAO,GAAG,4CAAd;AACA,QAAIC,WAAW,GAAG,4CAAlB;AACA,QAAIC,KAAK,GAAGT,MAAM,CAACqB,SAAP,CAAiBC,IAAjB,CAAsB,oBAAtB,CAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMjB,MAAM,CAACC,OAAD,EAAUC,WAAV,EAAuBC,KAAvB,CAA7B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYW,QAAZ;AACD,GAPD,MAOO;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AAEF;;AAID,SAASY,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,qCAEE;AAAQ,MAAA,OAAO,EAAEJ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KAPQI,G;AAST,eAAeA,GAAf","sourcesContent":["import Escrow from './artifacts/src/contracts/Escrow.sol/Escrow';\nimport {ethers} from 'ethers';\nimport './App.css';\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\nasync function deploy(arbiter, beneficiary, value) {\n  //await window.ethereum.request({ method: 'eth_requestAccounts' });\n  await provider.send(\"eth_requestAccounts\", []);\n  console.log('hello?');\n  const signer = provider.getSigner();\n  console.log(\"Account:\", await signer.getAddress());\n  const factory = new ethers.ContractFactory(Escrow.abi, Escrow.bytecode, signer);\n  return factory.deploy(arbiter, beneficiary, { value });\n}\n\nasync function newContract() {\n  if (typeof window.ethereum !== 'undefined') {\n    let arbiter = \"0x7fbA8b9606674E026D1Ae4468AadB9aCEfD41ae2\";\n    let beneficiary = \"0x8F6E16d717fb162C20aC6AC994cCbc44E6804EE9\";\n    let value = ethers.BigNumber.from(\"300000000000000000\");\n    const contract = await deploy(arbiter, beneficiary, value);\n    console.log('ga sampe?');\n    console.log(contract);\n  } else {\n    console.log('ethereum undefined');\n  }\n\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      App 1 \n      <button onClick={newContract}>Set Greeting</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}